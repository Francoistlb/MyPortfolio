version: '3'

services:
  # Service pour le frontend (nginx pour servir le frontend uniquemen)
  frontend:
    image: nginx:latest
    container_name: PortfolioV2-frontend
    volumes:
      - ./frontend:/usr/share/nginx/html
      - shared-assets:/usr/share/nginx/html/shared-assets
    ports:
      - "8080:80"
    networks:
      - app-network

  # Service pour le backend
  backend:
    build: ./backend
    container_name: PortfolioV2-backend
    volumes:
      - ./backend:/var/www/html
      - shared-assets:/var/www/html/assets  # Laissé tel quel pour le backend
    ports:
      - "8081:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # Service pour la base de données MySQL
  db:
    image: mysql:8
    container_name: PortfolioV2-mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: MyportolioV2
      MYSQL_DATABASE: portfolio
      MYSQL_USER: Administrateur
      MYSQL_PASSWORD: MyportolioV2
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pMyportolioV2"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    ports:
      - "3306:3306"
    networks:
      - app-network

  # Service pour phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: PortfolioV2-phpmyadmin
    ports:
      - "8082:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: MyportolioV2
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # Service nginx (reverse proxy)
  nginx:
    image: nginx:latest
    container_name: PortfolioV2-nginx
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  # Nouveau service pour accéder au volume
  assets-viewer:
    image: alpine:latest
    container_name: PortfolioV2-assets-viewer
    command: sh -c "while true; do sleep 3600; done"  # Maintient le conteneur en vie
    volumes:
      - shared-assets:/assets
      - ./assets-view:/assets-local  # Montage local
    # Copie automatique des fichiers du volume vers le dossier local
    entrypoint: >
      sh -c "
        mkdir -p /assets-local &&
        cp -rv /assets/* /assets-local/ &&
        echo 'Assets copiés dans ./assets-view' &&
        tail -f /dev/null
      "
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  shared-assets:
